package firstpro.abilityname;

import firstpro.abilityname.PlayerEvent.AbilityPl;
import org.bukkit.Bukkit;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.UUID;

public class PlayerCheck implements Listener {
    public static AbilityName ab;
    YamlConfiguration yml = new YamlConfiguration();
    public static File f = new File("./plugins/AbilityTag/Player");
    public File pl;
    UUID uuid;
    public static HashMap<UUID, AbilityPl> Plist = new HashMap<>();
    AbilityPl pl1;

    //檢查新加入的玩家在檔案夾是不是存在
    //存在就加載，不在就創建
    @EventHandler
    public void createPlayer(PlayerJoinEvent e){
        //uuid取得
        uuid = e.getPlayer().getUniqueId();
        String uuids = uuid.toString();
        //創建一個以玩家uuid為主的yml
        pl = new File("./plugins/AbilityTag/Player/", uuids + ".yml");
        //檢查玩家是不是第一次登入
        if(e.getPlayer().getLastPlayed() == 0) {
            //創建玩家資料
            try {
                pl.createNewFile();
                Bukkit.getServer().getLogger().info("創建一個新玩家");
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            this.yuset();
        }

        //萬一玩家資料被手動刪除，就再創建一個初始的玩家檔案
        else if (!pl.exists()) {
            try {
                pl.createNewFile();
                Bukkit.getServer().getLogger().info("此玩家資料遺失，已重新創建");
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            this.yuset();
        }
    }

    //預設資料的寫入
    public void yuset(){
        //讀取資料
        yml = YamlConfiguration.loadConfiguration(pl);
        yml.set("Kill.zombie", 0);
        yml.set("Kill.skeleton", 0);
        try {
            yml.save(pl);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    //檢查Player資料是否存在
    public static void Foldercheck() throws IOException {
        if(!f.exists()){
            f.mkdirs();
            Bukkit.getServer().getLogger().info("Player資料夾不存在");
            Bukkit.getServer().getLogger().info("已重新創建Player資料夾");
        }else{}
    }

    //讀取玩家資料
    @EventHandler
    public void loadPlayer(PlayerJoinEvent e){
        Player player = e.getPlayer();
        UUID id = player.getUniqueId();

        if(!Plist.containsKey(id)){
            pl1 = new AbilityPl(player , pl);
            Plist.put(uuid , pl1);
            pl1.getPlayer();
        }
    }

    public void QuitPlay(PlayerQuitEvent e){
        Player player = e.getPlayer();
        UUID id = player.getUniqueId();
        Plist.remove(id , pl1);
        AbilityPl.save(player );
    }
}
